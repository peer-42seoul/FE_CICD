name: Check Code Convention

on:
  pull_request:
    branches:
      - main

jobs:
  CI:
    name: Are You Ready? 😃
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout 🏁
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Check current directory
        run: |
          echo "Current directory:"
          pwd
          echo "Directory content:"
          ls -la

      - name: Change to project dic
        run: cd /home/runner/work/FE_CICD/FE_CICD

      - name: Install packages
        run: npm i /home/runner/work/FE_CICD/FE_CICD

      - name: Prettier
        working-directory: /home/runner/work/FE_CICD/FE_CICD
        run: npm run format

      - name: Lint
        working-directory: /home/runner/work/FE_CICD/FE_CICD
        run: npm run lint

  CD:
    name: Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🏁
        uses: actions/checkout@v2

      - name: Build and push Docker image
        run: |
          touch /home/runner/work/FE_CICD/FE_CICD/.env.production
          echo "${{ secrets.ENV_FILE }}" >> /home/runner/work/FE_CICD/FE_CICD/.env.production
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin 
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }}

      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_HOST }}
          port: 22
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }}
            docker rm -f $(docker ps -qa)
            docker run -d -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }}
            docker container prune -f
            docker image prune -f
